{
  "pluginAlias": "VirtualAccessoriesForHomebridge",
  "pluginType": "platform",
  "singular": true,
  "footerDisplay": "* = required fields",
  "strictValidation": true,
  "schema": {
    "type": "object",
    "properties": {
      "name": {
        "title": "Platform Name",
        "type": "string",
        "required": true,
        "default": "Virtual Accessories Platform",
        "readonly": true
      },
      "devices": {
        "title": "Accessories",
        "type": "array",
        "orderable": false,
        "uniqueItemProperties": [ "accessoryID" ],
        "items": {
          "title": "{{ $index }}",
          "type": "object",
          "expandable": true,
          "expanded": true,
          "properties": {
            "accessoryID": {
              "title": "Accessory ID",
              "description": "Unique ID for the Accessory (do not modify once assigned)",
              "type": "string",
              "required": true,
              "pattern": "^[A-Fa-f0-9\\-]{5,}$"
            },
            "accessoryName": {
              "title": "Accessory Name",
              "description": "Accessory name as it will be displayed in HomeKit",
              "type": "string",
              "required": true
            },
            "accessoryType": {
              "title": "Accessory Type",
              "description": "Accessory type",
              "type": "string",
              "required": true,
              "oneOf": [
                { "title": "Doorbell", "enum": ["doorbell"] },
                { "title": "Garage Door", "enum": ["garagedoor"] },
                { "title": "Lock", "enum": ["lock"] },
                { "title": "Sensor", "enum": ["sensor"] },
                { "title": "Switch", "enum": ["switch"] },
                { "title": "Valve", "enum": ["valve"] },
                { "title": "Window Covering - Blinds, Shades", "enum": ["windowcovering"] }
              ],
              "default": "switch"
            },
            "doorbellVolume": {
              "title": "Doorbell Volume *",
              "description": "Doorbell volume (0 - 100) *",
              "type": "integer",
              "minimum": 0,
              "condition": {
                "functionBody": "return model.devices[arrayIndices].accessoryType === 'doorbell';"
              }
            },
            "garageDoorDefaultState": {
              "title": "Garage Door Default State *",
              "description": "Garage Door default state",
              "type": "string",
              "oneOf": [
                { "title": "Closed", "enum": ["closed"] },
                { "title": "Open", "enum": ["open"] }
              ],
              "condition": {
                "functionBody": "return model.devices[arrayIndices].accessoryType === 'garagedoor';"
              }
            },
            "lockDefaultState": {
              "title": "Lock Default State *",
              "description": "Lock default state",
              "type": "string",
              "oneOf": [
                { "title": "Locked", "enum": ["locked"] },
                { "title": "Unlocked", "enum": ["unlocked"] }
              ],
              "condition": {
                "functionBody": "return model.devices[arrayIndices].accessoryType === 'lock';"
              }
            },
            "lockHardwareFinish": {
              "title": "Lock Hardware Finish *",
              "description": "Color of the virtual HomeKey card in the Wallet app",
              "type": "string",
              "oneOf": [
                { "title": "Tan", "enum": ["tan"] },
                { "title": "Gold", "enum": ["gold"] },
                { "title": "Silver", "enum": ["silver"] },
                { "title": "Black", "enum": ["black"] }
              ],
              "condition": {
                "functionBody": "return model.devices[arrayIndices].accessoryType === 'lock';"
              }
            },
            "switchDefaultState": {
              "title": "Switch Default State *",
              "description": "Switch default state",
              "type": "string",
              "oneOf": [
                { "title": "Off", "enum": ["off"] },
                { "title": "On", "enum": ["on"] }
              ],
              "condition": {
                "functionBody": "return model.devices[arrayIndices].accessoryType === 'switch';"
              }
            },
            "windowCoveringDefaultState": {
              "title": "Window Covering Default State *",
              "description": "Window Covering default state",
              "type": "string",
              "oneOf": [
                { "title": "Closed", "enum": ["closed"] },
                { "title": "Open", "enum": ["open"] }
              ],
              "condition": {
                "functionBody": "return model.devices[arrayIndices].accessoryType === 'windowcovering';"
              }
            },
            "valveType": {
              "title": "Valve Type *",
              "description": "Valve type",
              "type": "string",
              "oneOf": [
                { "title": "Generic Valve", "enum": ["generic"] },
                { "title": "Irrigation", "enum": ["irrigation"] },
                { "title": "Shower Head", "enum": ["showerhead"] },
                { "title": "Water Faucet", "enum": ["waterfaucet"] }
              ],
              "condition": {
                "functionBody": "return model.devices[arrayIndices].accessoryType === 'valve';"
              }
            },
            "valveDuration": {
              "title": "Valve Shut-Off Time *",
              "description": "Valve shut-off time in seconds (0 = no time limit)",
              "type": "integer",
              "maximum": 3600,
              "condition": {
                "functionBody": "return model.devices[arrayIndices].accessoryType === 'valve';"
              }
            },
            "sensorType": {
              "title": "Sensor Type *",
              "description": "Sensor type (Critical sensor notifications bypass Do Not Disturb)",
              "type": "string",
              "oneOf": [
                { "title": "Contact", "enum": ["contact"] },
                { "title": "Leak (critical)", "enum": ["leak"] },
                { "title": "Motion", "enum": ["motion"] },
                { "title": "Occupancy", "enum": ["occupancy"] },
                { "title": "Carbon Dioxide (critical)", "enum": ["carbonDioxide"] },
                { "title": "Carbon Monoxide (critical)", "enum": ["carbonMonoxide"] },
                { "title": "Smoke (critical)", "enum": ["smoke"] }
              ],
              "condition": {
                "functionBody": "return model.devices[arrayIndices].accessoryType === 'sensor';"
              }
            },
            "sensorTrigger": {
              "title": "Sensor Trigger *",
              "description": "Sensor trigger source",
              "type": "string",
              "oneOf": [
                { "title": "Ping Host", "enum": ["ping"] },
                { "title": "Cron Schedule", "enum": ["cron"] }
              ],
              "condition": {
                "functionBody": "return model.devices[arrayIndices].accessoryType === 'sensor';"
              }
            },
            "accessoryIsStateful": {
              "title": "Accessory Is Stateful",
              "description": "Accessory state survives Homebridge restart",
              "type": "boolean",
              "condition": {
                "functionBody": "return ['switch', 'lock', 'garagedoor', 'windowcovering'].includes(model.devices[arrayIndices].accessoryType) && [undefined, false].includes(model.devices[arrayIndices].accessoryHasResetTimer);"
              }
            },
            "accessoryHasResetTimer": {
              "title": "Accessory Has a Reset Timer",
              "description": "Accessory resets to default state when timer ends",
              "type": "boolean",
              "condition": {
                "functionBody": "return ['switch'].includes(model.devices[arrayIndices].accessoryType) && [undefined, false].includes(model.devices[arrayIndices].accessoryIsStateful);"
              }
            },
            "resetTimer": {
              "title": "Reset Timer",
              "type": "object",
              "properties": {
                "durationIsRandom": {
                  "title": "Timer Duration is Random",
                  "description": "The timer duration is random",
                  "type": "boolean"
                },
                "duration": {
                  "title": "Timer Duration *",
                  "description": "Set timer duration for accessory reset to default state",
                  "type": "integer",
                  "condition": {
                    "functionBody": "return model.devices[arrayIndices].resetTimer.durationIsRandom !== true;"
                  }
                },
                "durationRandomMin": {
                  "title": "Timer Min Duration *",
                  "description": "Set minimum timer duration for accessory reset to default state",
                  "type": "integer",
                  "condition": {
                    "functionBody": "return model.devices[arrayIndices].resetTimer && model.devices[arrayIndices].resetTimer.durationIsRandom === true;"
                  }
                },
                "durationRandomMax": {
                  "title": "Timer Max Duration *",
                  "description": "Set maximum timer duration for accessory reset to default state",
                  "type": "integer",
                  "condition": {
                    "functionBody": "return model.devices[arrayIndices].resetTimer && model.devices[arrayIndices].resetTimer.durationIsRandom === true;"
                  }
                },
                "units": {
                  "title": "Timer Units *",
                  "description": "Reset timer units",
                  "type": "string",
                  "oneOf": [
                    { "title": "Seconds", "enum": ["seconds"] },
                    { "title": "Minutes", "enum": ["minutes"] },
                    { "title": "Hours", "enum": ["hours"] },
                    { "title": "Days", "enum": ["days"] }
                  ]
                },
                "isResettable": {
                  "title": "Timer is Resettable",
                  "description": "The timer is reset every time the accessory is triggered, even if the accessory's state doesn't change",
                  "type": "boolean"
                }
              },
              "condition": {
                "functionBody": "return model.devices[arrayIndices].accessoryHasResetTimer === true;"
              },
              "allOf": [
                {
                  "if": {
                    "properties": {
                      "durationIsRandom": { "const": true }
                    },
                    "required": [ "durationIsRandom" ]
                  },
                  "then": {
                    "required": [ "durationRandomMin", "durationRandomMax" ]
                  },
                  "else": {
                    "required": [ "duration" ]
                  }
                }
              ]
            },
            "accessoryHasCompanionSensor": {
              "title": "Accessory Has a Companion Sensor",
              "description": "Accessory triggers a sensor when its state changes",
              "type": "boolean",
              "condition": {
                "functionBody": "return ['switch'].includes(model.devices[arrayIndices].accessoryType);"
              }
            },
            "companionSensor": {
              "title": "Companion Sensor",
              "type": "object",
              "properties": {
                "name": {
                  "title": "Sensor Name *",
                  "description": "Sensor name as it will be displayed in HomeKit",
                  "type": "string"
                },
                "type": {
                  "title": "Sensor Type *",
                  "description": "Sensor type triggered by accessory state change (Critical sensor notifications bypass Do Not Disturb)",
                  "type": "string",
                  "oneOf": [
                    { "title": "Contact", "enum": ["contact"] },
                    { "title": "Leak (critical)", "enum": ["leak"] },
                    { "title": "Motion", "enum": ["motion"] },
                    { "title": "Occupancy", "enum": ["occupancy"] },
                    { "title": "Carbon Dioxide (critical)", "enum": ["carbonDioxide"] },
                    { "title": "Carbon Monoxide (critical)", "enum": ["carbonMonoxide"] },
                    { "title": "Smoke (critical)", "enum": ["smoke"] }
                  ]
                }
              },
              "condition": {
                "functionBody": "return model.devices[arrayIndices].accessoryHasCompanionSensor === true;"
              }
            },
            "pingTrigger": {
              "title": "Ping Host Trigger",
              "type": "object",
              "properties": {
                "host": {
                  "title": "Host *",
                  "description": "IP address of host to ping (ex: 156.27.86.172)",
                  "type": "string",
                  "pattern": "^((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\\.){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])$"
                },
                "failureRetryCount": {
                  "title": "Retries Before Failure *",
                  "description": "Failed ping count before triggering the sensor",
                  "type": "number",
                  "minimum": 0
                },
                "isDisabled": {
                  "title": "Disable Ping Trigger",
                  "description": "Turn off/on trigger",
                  "type": "boolean"
                }
              },
              "condition": {
                "functionBody": "return model.devices[arrayIndices].sensorTrigger === 'ping';"
              }
            },
            "cronTrigger": {
              "title": "Cron Schedule Trigger",
              "type": "object",
              "properties": {
                "pattern": {
                  "title": "Cron Pattern *",
                  "description": "Unix cron pattern (* * * * *)",
                  "type": "string",
                  "pattern": "^((((\\d+,)+\\d+|(\\d+(\\/|-|#)\\d+)|\\d+L?|\\*(\\/\\d+)?|L(-\\d+)?|\\?|[A-Z]{3}(-[A-Z]{3})?) ?){5})$"
                },
                "zoneId": {
                  "title": "Zone Id",
                  "description": "Zone id. Ex: 'America/Los_Angeles'. Defaults to system zone id",
                  "type": "string",
                  "pattern": "^(?:(?:[A-Za-z_\\-]+\/[A-Za-z_\\-]+(?:\/[A-Za-z_\\-]+)?)|(?:Etc\/[A-Za-z0-9+\\-]+(?:\/[A-Za-z0-9]+)?|(?:CET|CST6CDT|EET|EST|EST5EDT|MET|MST|MST7MDT|PST8PDT|HST)))$"
                },
                "startDateTime": {
                  "title": "Start Date-Time",
                  "description": "Start date and time",
                  "type": "string",
                  "format": "date-time"
                },
                "endDateTime": {
                  "title": "End Date-Time ",
                  "description": "End date and time",
                  "type": "string",
                  "format": "date-time"
                },
                "isDisabled": {
                  "title": "Disable Cron Trigger",
                  "description": "Turn off/on trigger",
                  "type": "boolean"
                }
              },
              "condition": {
                "functionBody": "return model.devices[arrayIndices].sensorTrigger === 'cron';"
              }
            }
          },
          "allOf": [
            {
              "if": {
                "properties": {
                  "accessoryType": { "const": "switch" }
                }
              },
              "then": {
                "required": [ "switchDefaultState" ]
              }
            },
            {
              "if": {
                "properties": {
                  "accessoryType": { "const": "doorbell" }
                }
              },
              "then": {
                "required": [ "doorbellVolume" ]
              }
            },
            {
              "if": {
                "properties": {
                  "accessoryType": { "const": "lock" }
                }
              },
              "then": {
                "required": [ "lockDefaultState", "lockHardwareFinish" ]
              }
            },
            {
              "if": {
                "properties": {
                  "accessoryType": { "const": "garagedoor" }
                }
              },
              "then": {
                "required": [ "garageDoorDefaultState" ]
              }
            },
            {
              "if": {
                "properties": {
                  "accessoryType": { "const": "sensor" }
                }
              },
              "then": {
                "required": [ "sensorType" ]
              }
            },
            {
              "if": {
                "properties": {
                  "accessoryHasResetTimer": { "const": true }
                },
                "required": [ "accessoryHasResetTimer" ]
              },
              "then": {
                "required": [ "resetTimer" ],
                "properties": {
                  "resetTimer": {
                    "required": [ "units" ]
                  }
                }
              }
            },
            {
              "if": {
                "properties": {
                  "accessoryHasCompanionSensor": { "const": true }
                },
                "required": [ "accessoryHasCompanionSensor" ]
              },
              "then": {
                "required": [ "companionSensor" ],
                "properties": {
                  "companionSensor": {
                    "required": [ "name", "type" ]
                  }
                }
              }
            },
            {
              "if": {
                "properties": {
                  "sensorTrigger": { "const": "ping" }
                },
                "required": [ "sensorTrigger" ]
              },
              "then": {
                "required": [ "pingTrigger" ],
                "properties": {
                  "pingTrigger": {
                    "required": [ "host", "failureRetryCount" ]
                  }
                }
              }
            },
            {
              "if": {
                "properties": {
                  "sensorTrigger": { "const": "cron" }
                },
                "required": [ "sensorTrigger" ]
              },
              "then": {
                "required": [ "cronTrigger" ],
                "properties": {
                  "cronTrigger": {
                    "required": [ "pattern" ]
                  }
                }
              }
            }
          ]
        }
      }
    }
  },
  "form": [
    {
      "type": "fieldset",
      "title": "Platform",
      "items": []
    },
    "*"
  ]
}
